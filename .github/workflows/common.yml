# Copyright Â© 2025 Brent Tunnicliff <brent@tunnicliff.dev>

name: Common Apple Pipeline

on:
  workflow_call:
    inputs:
      platform:
        description: "The platform to be used, options are 'iOS', 'macOS', 'tvOS', 'watchOS', 'visionOS'"
        required: true
        type: string
      scheme:
        description: "The scheme to use"
        required: true
        type: string
      skip_tests:
        description: "Should the tests be skipped"
        default: false
        required: false
        type: boolean
      workspace:
        description: "The workspace of the project"
        required: false
        type: string
jobs:
  pipeline:
    runs-on: macos-15
    steps:
      - name: Set aruments
        id: arguments
        run: |
          if [[ "${{ inputs.platform }}" == "iOS" ]]; then
            SIMULATOR="iOS 18"
          elif [[ "${{ inputs.platform }}" == "macOS" ]]; then
            DESTINATION="platform=macOS"
          elif [[ "${{ inputs.platform }}" == "tvOS" ]]; then
            SIMULATOR="tvOS 18"
          elif [[ "${{ inputs.platform }}" == "watchOS" ]]; then
            SIMULATOR="watchOS 11"
          elif [[ "${{ inputs.platform }}" == "visionOS" ]]; then
            SIMULATOR="visionOS 2"
          else
            echo "Unexpected platform value '${{ inputs.platform }}'"
            exit 1
          fi

          if [[ $SIMULATOR != "" ]]; then
            DEVICE_ID=$(xcrun simctl list devices "$SIMULATOR" | grep -m 1 -E -o -i "([0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12})")
            DESTINATION="id=$DEVICE_ID"
          fi

          if [[ $DESTINATION != "" ]]; then
            echo $DESTINATION
            echo "destination=$DESTINATION" >> "$GITHUB_OUTPUT"
          else
            echo "DESTINATION missing"
            exit 1
          fi

          if [[ "${{ inputs.workspace }}" != "" ]]; then
            echo "Applying workspace ${{ inputs.workspace }}"
            echo 'workspace=-workspace "${{ inputs.workspace }}"' >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/checkout@v4
      - name: Set Xcode version
        run: sudo xcode-select -s "/Applications/Xcode_16.2.app"
      - name: Build Debug
        run: xcodebuild build
          ${{ steps.arguments.outputs.workspace }}
          -scheme "${{ inputs.scheme }}"
          -destination "${{ steps.arguments.outputs.destination }}"
          -configuration "Debug"
          -skipPackagePluginValidation
          CODE_SIGN_IDENTITY=""
          CODE_SIGNING_REQUIRED=NO
      - name: Build Unit tests
        if: ${{ ! inputs.skip_tests }}
        run: xcodebuild build-for-testing
          ${{ steps.arguments.outputs.workspace }}
          -scheme "${{ inputs.scheme }}"
          -destination "${{ steps.arguments.outputs.destination }}"
          -skipPackagePluginValidation
          CODE_SIGN_IDENTITY=""
          CODE_SIGNING_REQUIRED=NO
      - name: Run Unit tests
        if: ${{ ! inputs.skip_tests }}
        run: xcodebuild test-without-building
          ${{ steps.arguments.outputs.workspace }}
          -scheme "${{ inputs.scheme }}"
          -destination "${{ steps.arguments.outputs.destination }}"
          CODE_SIGN_IDENTITY=""
          CODE_SIGNING_REQUIRED=NO
      - name: Build Release
        run: xcodebuild build
          ${{ steps.arguments.outputs.workspace }}
          -scheme "${{ inputs.scheme }}"
          -destination "${{ steps.arguments.outputs.destination }}"
          -configuration "Release"
          -skipPackagePluginValidation
          CODE_SIGN_IDENTITY=""
          CODE_SIGNING_REQUIRED=NO
